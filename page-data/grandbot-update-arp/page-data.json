{"componentChunkName":"component---src-templates-blog-post-js","path":"/grandbot-update-arp/","result":{"data":{"site":{"siteMetadata":{"title":"Tech Blog"}},"markdownRemark":{"id":"62885aa2-5c31-574d-8eb7-56c9eb3118fb","excerpt":"Disclaimer: I don’t know what I’m talking about. I’m a JavaScript dev who’s just learning this stuff too. I’m sharing what I think I learned, but that doesn’t…","html":"<p><em><strong>Disclaimer:</strong> I don’t know what I’m talking about. I’m a JavaScript dev who’s just learning this stuff too. I’m sharing what I <strong>think</strong> I learned, but that doesn’t make it the truth.</em></p>\n<p><em>Project originally inspired by the work of <a href=\"https://twitter.com/MohitBhoite\">Mohit Bhoite</a>.</em></p>\n<p><em>Code references the state as of <a href=\"https://github.com/handeyeco/Grandbot/releases/tag/2024-05-01\">this tag</a>.</em></p>\n<h2>Introduction</h2>\n<p>So I put Grandbot down for awhile, explored other hobbies, and found my way back to tinkering with electronics. I started looking at open source projects for synths and learned how to design PCBs for my own projects. Realizing I could make a custom PCB for Grandbot (who had been living in a breadboard for years) while also realizing that Grandbot still had a lot of spare memory, I thought I would make Grandbot play synths using MIDI.</p>\n<p>I’m not going to waste time explaining <a href=\"https://github.com/handeyeco/Grandbot\">Grandbot</a>, <a href=\"https://en.wikipedia.org/wiki/MIDI\">MIDI</a>, <a href=\"https://en.wikipedia.org/wiki/Synthesizer\">synthesizers</a>, <a href=\"https://www.soundonsound.com/techniques/making-most-arpeggiators\">arpeggiators</a>, or the <a href=\"https://github.com/handeyeco/Grandbot/blob/f3aa1b55b50c097ed3ffdcc1509db3f21eb60274/circuit/ALPHA-grandbot-midi/grandbot-midi-schematic.png\">circuit</a> (based on <a href=\"https://www.pjrc.com/teensy/td_libs_MIDI.html\">this</a> and <a href=\"https://www.notesandvolts.com/2015/02/midi-and-arduino-build-midi-input.html\">this</a>). I’m going to jump straight into explaining how Grandbot’s new generative, pattern-based arpeggiator works.</p>\n<h2>Concept</h2>\n<p>Most arps have preset patterns: up, down, up-down, etc. Occasionally arps will have a random setting that’s usually chaotic fun albeit a little unmusical. The idea behind Grandbot’s arp is essentially: what if we used randomness to generate a sequence and then repeat it to make it more musical. However, as opposed to sequences that are musical intervals relative to a root note, this arp basically stores array indexes to retrieve individual notes from an array of active notes.</p>\n<p>Okay some pseudocode (using <a href=\"https://audiodev.blog/midi-note-chart/\">MIDI note numbers</a> to represent notes):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Random arp</span>\n<span class=\"token comment\">// randomly plays one of the four pressed notes</span>\npressed_notes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">,</span> <span class=\"token number\">71</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    note <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span>pressed_notes<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">play</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Sequence, relative to a root note</span>\n<span class=\"token comment\">// loops 60 71 64 67</span>\nsequence <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\npressed_note <span class=\"token operator\">=</span> <span class=\"token number\">60</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>interval <span class=\"token keyword\">in</span> sequence<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">play</span><span class=\"token punctuation\">(</span>pressed_note <span class=\"token operator\">+</span> interval<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Grandbot</span>\n<span class=\"token comment\">// loops 60 71 67 60</span>\nindexes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span>\npressed_notes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">,</span> <span class=\"token number\">71</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index <span class=\"token keyword\">in</span> indexes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">play</span><span class=\"token punctuation\">(</span>active_notes<span class=\"token punctuation\">[</span>index <span class=\"token operator\">%</span> active_notes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So that’s the basic idea: it’s not random notes and it’s not a sequence of intervals. It’s a randomly selected sequence of indexes used to access an array of notes.</p>\n<h2>The data</h2>\n<p>The above pseudocode is all well-and-good, but I wanted to do a couple of other things with the arp:</p>\n<ul>\n<li>Allow for octaves: we’ll use +/- numbers as note offsets (+12 up an octave, -12 down an octave)</li>\n<li>Allow for variation in note lengths: we’ll track when a note should start using <a href=\"https://en.wikipedia.org/wiki/MIDI_beat_clock\">MIDI clock pulses</a> (24 pulses per quarter note)</li>\n</ul>\n<p>Let’s make the pseudocode a little more realistic:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">current_note <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\ncurrent_pulse <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\npressed_notes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">,</span> <span class=\"token number\">71</span><span class=\"token punctuation\">]</span>\n\nindexes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span>\noffsets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nstart_pulses <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">]</span>\n\ntotal_length <span class=\"token operator\">=</span> <span class=\"token number\">84</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    current_pulse <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>current_pulse <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> total_length\n    step_index <span class=\"token operator\">=</span> start_pulses<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>current_pulse<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// return early if we're not on a new step</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>step_index <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current_note<span class=\"token punctuation\">)</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>current_note<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// wrap the index in the sequence</span>\n    <span class=\"token comment\">// around the length of pressed_notes</span>\n    note_index <span class=\"token operator\">=</span> indexes<span class=\"token punctuation\">[</span>step_index<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> pressed_notes<span class=\"token punctuation\">.</span>length\n\n    <span class=\"token comment\">// get the note and apply the octave offset</span>\n    current_note <span class=\"token operator\">=</span> pressed_notes<span class=\"token punctuation\">[</span>note_index<span class=\"token punctuation\">]</span>\n    current_note <span class=\"token operator\">+=</span> offsets<span class=\"token punctuation\">[</span>step_index<span class=\"token punctuation\">]</span>\n    <span class=\"token function\">play</span><span class=\"token punctuation\">(</span>current_note<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That should loop <code class=\"language-text\">60 71 55 60</code> (<code class=\"language-text\">60 71 67 60</code> before the octave transform). It should play it in a <code class=\"language-text\">quarter-eighth-quarter-quarter</code> pattern (in pulses: <code class=\"language-text\">24 12 24 24</code> from 0-83 pulses).</p>\n<h2>Generating a sequence</h2>\n<p>At this point we have most of what we need to generate a new sequence, we just need to add some thresholds for randomness and do the thing. Grandbot stores these randomness threshold values using 7-bit numbers (0-127; since that’s what <a href=\"https://en.wikipedia.org/wiki/MIDI#Messages\">MIDI messages</a> use).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">octave_chance <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\nmax_pressed_notes <span class=\"token operator\">=</span> <span class=\"token number\">16</span>\npossible_lengths <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 16th</span>\n    <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 8th</span>\n    <span class=\"token number\">24</span>  <span class=\"token comment\">// Quarter</span>\n<span class=\"token punctuation\">]</span>\n\nindexes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\noffsets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nstart_pulses <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\ntotal_length <span class=\"token operator\">=</span> <span class=\"token number\">84</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    new_length <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    step <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>new_length <span class=\"token operator\">&lt;</span> total_length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// get a random length from the array of options</span>\n        note_length <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span>possible_lengths<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// get a random number between</span>\n        <span class=\"token comment\">// 0 (inclusive) and 16 (exclusive)</span>\n        index <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span>max_pressed_notes<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// get a random octave up or down</span>\n        offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">127</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> octave_chance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                offset <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                offset <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">12</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        indexes<span class=\"token punctuation\">[</span>step<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> index\n        offsets<span class=\"token punctuation\">[</span>step<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> offset\n        start_pulses<span class=\"token punctuation\">[</span>step<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_length\n        new_length <span class=\"token operator\">+=</span> note_length\n        step <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Besides handling the actual MIDI messages (I used <a href=\"https://github.com/FortySevenEffects/arduino_midi_library\">Arduino MIDI library</a>), that’s pretty close to all we need.</p>\n<h2>Visualizing the note wrapping</h2>\n<p>Okay, so let’s try to make the structure of this a little easier to grok.</p>\n<p>Say for each step we pick a random index (in this example <code class=\"language-text\">max_pressed_notes</code> will be 7) but only press one note. Even if the random index <em>never</em> lands on the one note being pressed, it will <em>always</em> play that note.</p>\n<p><img src=\"/tech-blog/be0b82c52aa5d58c7e8572175a2fb35c/one.svg\" alt=\"Sequence of notes if only one note is pressed\"></p>\n<p>Now if we do this for a couple of notes, sometimes the index will land on a pressed note and sometime it will have to wrap.</p>\n<p><img src=\"/tech-blog/8382d56f9f7ab5ec3c578ba49887f576/three.svg\" alt=\"Sequence of notes if three notes are pressed\"></p>\n<p>For the last one we press all seven notes available and get the full range of the sequence.</p>\n<p><img src=\"/tech-blog/e6a0303c669e8d7688e9f0ac66d92b84/seven.svg\" alt=\"Sequence of notes if all notes are pressed\"></p>\n<p>So even though the sequence is the same for all three example, we get three very different results:</p>\n<ol>\n<li>With only one notes pressed, we always get that one note</li>\n<li>With only a couple of notes pressed, we sometimes land on a pressed note and sometimes we have to wrap</li>\n<li>With all notes pressed, we always land on a pressed note and never have to wrap</li>\n</ol>\n<p>All of this is happening before we transform the notes with varying rhythms and offsets (i.e. octaves). So even if we only press one note, we could still have a lot of interesting variations.</p>\n<h2>Conclusion</h2>\n<p>The real code for the arp does a lot more, for example:</p>\n<ul>\n<li>Rests</li>\n<li>Fifths</li>\n<li>Ratchets</li>\n</ul>\n<p>There’s also a fun feature called “Slip” that gently transforms the existing sequence by randomly swapping notes. If you’d like to know more about the project, it’s all <a href=\"https://github.com/handeyeco/Grandbot\">open source</a>! Sharing is caring!</p>","frontmatter":{"title":"Grandbot Update - Arp","date":"May 01, 2024","description":"Grandbot can play synths now."}}},"pageContext":{"slug":"/grandbot-update-arp/","previous":{"fields":{"slug":"/inkscape-notes/"},"frontmatter":{"title":"Inkscape Tips for Technical Drawing"}},"next":null}}}