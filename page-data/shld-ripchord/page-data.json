{"componentChunkName":"component---src-templates-blog-post-js","path":"/shld-ripchord/","result":{"data":{"site":{"siteMetadata":{"title":"Tech Blog"}},"markdownRemark":{"id":"cc04e7dd-f2dc-5cbe-ba95-b63f32eebab1","excerpt":"tl;dr: if you typed “free ripchord presets” and landed here, here’s a bunch of free Ripchord presets thanks to SHLD. Ripchord is a free, open-source VST for…","html":"<p><strong>tl;dr</strong>: if you typed “free ripchord presets” and landed here, here’s a <a href=\"/tech-blog/2978c33d261d9941a02ee756507b1e21/shld-ripchord-progressions.zip\">bunch of free Ripchord presets</a> thanks to <a href=\"https://github.com/ldrolez/free-midi-chords\">SHLD</a>.</p>\n<hr>\n<p><a href=\"https://trackbout.com/\">Ripchord</a> is a free, open-source VST for mapping single note presses into chords. It uses XML to store presets in this format:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ripchord</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>preset</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- MIDI note to trigger the chord --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">note</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>60<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\">&lt;!-- name of the chord and MIDI notes to play --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>chord</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>C Major<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">notes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>60;64;67<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>input</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>preset</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ripchord</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>While working on <a href=\"https://github.com/handeyeco/Grandbot\">Grandbot</a>, I thought it would be cool if he could generate chord progressions. Rather than trying to program progressions into Grandbot directly though (which would be boring because I don’t know a ton of music theory), I decided to leverage the Ripchord preset format to make <a href=\"https://github.com/handeyeco/norns-ripchord\">norns-ripchord</a>.</p>\n<p>Now Grandbot can make a sequence of notes and Norns can adapt those notes into chord progressions. With two Grandbots I can convert the chord progressions back into melodies!</p>\n<p>So far, so good. The only problem is that there isn’t a ton of Ripchord presets available online and I didn’t want to use proprietary formats like Scaler or Cthulhu. <a href=\"https://www.patreon.com/musicianparadise\">Musician Paradise</a> has a bunch of great Ripchord presets and I also found <a href=\"https://github.com/ldrolez/free-midi-chords\">SHLD Free MIDI Chord Packs</a> - the only problem with the latter is that my code reads XML and not MIDI files.</p>\n<p>So I wrote <a href=\"https://github.com/handeyeco/shld-ripchord\">shld-ripchord</a>. Here’s the basic idea of the script which is using <a href=\"https://mido.readthedocs.io/en/stable/\">Mido</a> for MIDI parsing:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># SHLD files are named like: Am - I IV V IV.mid</span>\n<span class=\"token comment\"># so we grab the roman numeral name of each chord</span>\nname_regex <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.+ - (.+).mid'</span><span class=\"token punctuation\">)</span>\nname_match <span class=\"token operator\">=</span> name_regex<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span>source_path<span class=\"token punctuation\">)</span>\nchord_names <span class=\"token operator\">=</span> name_match<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># set some global variables</span>\nprog_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nchord_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nchord_notes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># I wanted mappings to be on white keys</span>\n<span class=\"token comment\"># starting with middle C</span>\nwhite_key_intervals <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ntrig_note <span class=\"token operator\">=</span> <span class=\"token number\">60</span>\n\n<span class=\"token comment\"># load the MIDI file and iterate over the MIDI messages</span>\nmidi_file <span class=\"token operator\">=</span> mido<span class=\"token punctuation\">.</span>MidiFile<span class=\"token punctuation\">(</span>source_path<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> msg <span class=\"token keyword\">in</span> midi_file<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># accumulate all sequential \"note on\" notes</span>\n    <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"note_on\"</span><span class=\"token punctuation\">:</span>\n        chord_notes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># when we hit a \"note off\" MIDI message</span>\n    <span class=\"token comment\"># convert collected \"note on\" messages into a chord</span>\n    <span class=\"token keyword\">elif</span> msg<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"note_off\"</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>chord_notes<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># create a new mapping: trigger + name + chord</span>\n        prog_dict<span class=\"token punctuation\">[</span>trig_note<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        prog_dict<span class=\"token punctuation\">[</span>trig_note<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"notes\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> chord_notes\n        prog_dict<span class=\"token punctuation\">[</span>trig_note<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> chord_names<span class=\"token punctuation\">[</span>chord_count<span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># reset</span>\n        <span class=\"token comment\"># increment trig_note in a way that makes all triggers</span>\n        <span class=\"token comment\"># land on white keys</span>\n        trig_note <span class=\"token operator\">+=</span> white_key_intervals<span class=\"token punctuation\">[</span>chord_count <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>white_key_intervals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        chord_count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        chord_notes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Here’s the code explained:</p>\n<ol>\n<li>Go through each MIDI message in a <code class=\"language-text\">.mid</code> file using Mido</li>\n<li>Collect all “note on” messages until we hit a “note off”</li>\n<li>When we hit “note off”, combine collected notes into a chord</li>\n<li>Use the SHLD file name convention as a way to name chords</li>\n<li>Increment the trigger note in a way that lands them on white keys</li>\n</ol>\n<p>The reason I didn’t want to be clever about the which trigger note to use:</p>\n<ol>\n<li>Progressions reuse chords; <code class=\"language-text\">I IV V IV</code> uses the <code class=\"language-text\">IV</code> chord twice</li>\n<li>The lowest note isn’t always the root note</li>\n<li>Placing chords on root notes doesn’t show the chord progression</li>\n</ol>\n<p>So I just throw them on the white keys and <code class=\"language-text\">norns-ripchord</code> can lock stray notes onto the nearest mapping.</p>\n<p>Once I finished this project, <strong>I realized I had actually done this before in JavaScript</strong> which is kind of embarrassing. It was part of my unfinished attempt to autogenerate Ripchord presets based on sets of chords: <a href=\"https://github.com/handeyeco/ripchord-presets\">ripchord-presets</a>. My life fluttering away one MIDI project at a time.</p>\n<p>Anyway, here’s a <a href=\"/tech-blog/2978c33d261d9941a02ee756507b1e21/shld-ripchord-progressions.zip\">bunch of free Ripchord chord progression presets</a> ala SHLD.</p>","frontmatter":{"title":"From MIDI to Ripchord","date":"January 09, 2025","description":"Converting SHLD MIDI progressions to Ripchord presets."}}},"pageContext":{"slug":"/shld-ripchord/","previous":{"fields":{"slug":"/web-midi-sysex/"},"frontmatter":{"title":"SysEx and the Web MIDI API"}},"next":{"fields":{"slug":"/grids-bit-shift/"},"frontmatter":{"title":"MI Grids Bitwise Shift"}}}},"staticQueryHashes":["63159454"]}