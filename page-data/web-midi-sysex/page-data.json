{"componentChunkName":"component---src-templates-blog-post-js","path":"/web-midi-sysex/","result":{"data":{"site":{"siteMetadata":{"title":"Tech Blog"}},"markdownRemark":{"id":"55e543d6-847b-5c31-a33c-a401a9b4b810","excerpt":"Yesterday I wrote a blog post about how to send DX7 SysEx cartridges to the Korg Volca FM2. While I was writing it, I was thinking about how it was weird that…","html":"<p>Yesterday I wrote <a href=\"https://handeyeco.github.io/tech-blog/volca-fm2-cart/\">a blog post</a> about how to send DX7 SysEx cartridges to the Korg Volca FM2. While I was writing it, I was thinking about how it was weird that SysEx Librarian only worked for OSX, MIDI-OX only worked for Windows, and there wasn’t a web-based solution for sending SysEx. It piqued my curiosity, so I thought I’d give it a go with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_MIDI_API\">Web MIDI API</a>.</p>\n<p>Introducing <a href=\"https://handeyeco.github.io/sysex-send/\">SysEx Send</a> (<a href=\"https://github.com/handeyeco/sysex-send\">Source</a>)</p>\n<p>For security reasons, Firefox has locked down the Web MIDI API so it’s kind of difficult to use. As a Google hater it’s with a heavy heart that I need to say this is a Chrome-focused solution.</p>\n<p>Anyway, with all that out of the way, here’s how sending SysEx works on the web.</p>\n<h2>Get MIDI access</h2>\n<p>The Web MIDI API can be abused by malicious assholes (for instance for <a href=\"https://en.wikipedia.org/wiki/Device_fingerprint\">fingerprinting</a>), part of why Firefox has locked it down. Chrome also locks it down to some extent, so we need to get permission from the user first before accessing MIDI devices.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">navigator\n  <span class=\"token comment\">// explicitly allow SysEx when requesting MIDI access</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">requestMIDIAccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">sysex</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">access</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// here you have access to a map of MIDI outputs</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>access<span class=\"token punctuation\">.</span>outputs<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Get a SysEx file</h2>\n<p>I used a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file\">file input</a> that only allows files with <code class=\"language-text\">.syx</code> extensions:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleSelectSysex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Get access to the first Sysex file selected</span>\n  <span class=\"token keyword\">const</span> sysexFile <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sysexFile<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">accept</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.syx<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token comment\">// I'm using React, but you don't need to</span>\n  <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleSelectSysex<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h2>Send those bytes</h2>\n<p>There are several ways to read a file in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File_API\">File API</a>, but here’s what I did:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// load the file into a buffer</span>\n<span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> sysexFile<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// convert that buffer into an array a 8-bit unsigned ints</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// use the MIDI output to send the array of bytes</span>\noutput<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Conclusion</h2>\n<p>That’s pretty much all there was to it, the rest of the code is building up the UI around it. Just took a couple of hours and I was loading DX7 carts to my Volca FM2 from the browser.</p>\n<p>Again, the project is open-source so if you’d like to know more <a href=\"https://github.com/handeyeco/sysex-send\">check out the code here</a>. Happy hacking!</p>","frontmatter":{"title":"SysEx and the Web MIDI API","date":"December 14, 2024","description":"How to send MIDI system exclusive messages from the Web MIDI API."}}},"pageContext":{"slug":"/web-midi-sysex/","previous":{"fields":{"slug":"/volca-fm2-cart/"},"frontmatter":{"title":"Korg Volca FM2 Full Cart SysEx"}},"next":{"fields":{"slug":"/shld-ripchord/"},"frontmatter":{"title":"From MIDI to Ripchord"}}}},"staticQueryHashes":["63159454"]}